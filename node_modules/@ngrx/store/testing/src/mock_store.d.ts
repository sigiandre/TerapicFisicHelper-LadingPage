import { Observable } from 'rxjs';
import { Action, ActionsSubject, ReducerManager, Store, MemoizedSelectorWithProps, MemoizedSelector } from '@ngrx/store';
import { MockState } from './mock_state';
import { MockSelector } from './mock_selector';
import * as ɵngcc0 from '@angular/core';
declare type OnlyMemoized<T, Result> = T extends string | MemoizedSelector<any, any> ? MemoizedSelector<any, Result> : T extends MemoizedSelectorWithProps<any, any, any> ? MemoizedSelectorWithProps<any, any, Result> : never;
declare type Memoized<Result> = MemoizedSelector<any, Result> | MemoizedSelectorWithProps<any, any, Result>;
export declare class MockStore<T = object> extends Store<T> {
    private state$;
    private initialState;
    private readonly selectors;
    readonly scannedActions$: Observable<Action>;
    private lastState?;
    constructor(state$: MockState<T>, actionsObserver: ActionsSubject, reducerManager: ReducerManager, initialState: T, mockSelectors?: MockSelector[]);
    setState(nextState: T): void;
    overrideSelector<Selector extends Memoized<Result>, Value extends Result, Result = Selector extends MemoizedSelector<any, infer T> ? T : Selector extends MemoizedSelectorWithProps<any, any, infer U> ? U : Value>(selector: Selector | string, value: Value): OnlyMemoized<typeof selector, Result>;
    resetSelectors(): void;
    select(selector: any, prop?: any): Observable<any>;
    addReducer(): void;
    removeReducer(): void;
    /**
     * Refreshes the existing state.
     */
    refreshState(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MockStore<any>>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<MockStore<any>>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ja19zdG9yZS5kLnRzIiwic291cmNlcyI6WyJtb2NrX3N0b3JlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFjdGlvbiwgQWN0aW9uc1N1YmplY3QsIFJlZHVjZXJNYW5hZ2VyLCBTdG9yZSwgTWVtb2l6ZWRTZWxlY3RvcldpdGhQcm9wcywgTWVtb2l6ZWRTZWxlY3RvciB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IE1vY2tTdGF0ZSB9IGZyb20gJy4vbW9ja19zdGF0ZSc7XG5pbXBvcnQgeyBNb2NrU2VsZWN0b3IgfSBmcm9tICcuL21vY2tfc2VsZWN0b3InO1xuZGVjbGFyZSB0eXBlIE9ubHlNZW1vaXplZDxULCBSZXN1bHQ+ID0gVCBleHRlbmRzIHN0cmluZyB8IE1lbW9pemVkU2VsZWN0b3I8YW55LCBhbnk+ID8gTWVtb2l6ZWRTZWxlY3RvcjxhbnksIFJlc3VsdD4gOiBUIGV4dGVuZHMgTWVtb2l6ZWRTZWxlY3RvcldpdGhQcm9wczxhbnksIGFueSwgYW55PiA/IE1lbW9pemVkU2VsZWN0b3JXaXRoUHJvcHM8YW55LCBhbnksIFJlc3VsdD4gOiBuZXZlcjtcbmRlY2xhcmUgdHlwZSBNZW1vaXplZDxSZXN1bHQ+ID0gTWVtb2l6ZWRTZWxlY3RvcjxhbnksIFJlc3VsdD4gfCBNZW1vaXplZFNlbGVjdG9yV2l0aFByb3BzPGFueSwgYW55LCBSZXN1bHQ+O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTW9ja1N0b3JlPFQgPSBvYmplY3Q+IGV4dGVuZHMgU3RvcmU8VD4ge1xuICAgIHByaXZhdGUgc3RhdGUkO1xuICAgIHByaXZhdGUgaW5pdGlhbFN0YXRlO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc2VsZWN0b3JzO1xuICAgIHJlYWRvbmx5IHNjYW5uZWRBY3Rpb25zJDogT2JzZXJ2YWJsZTxBY3Rpb24+O1xuICAgIHByaXZhdGUgbGFzdFN0YXRlPztcbiAgICBjb25zdHJ1Y3RvcihzdGF0ZSQ6IE1vY2tTdGF0ZTxUPiwgYWN0aW9uc09ic2VydmVyOiBBY3Rpb25zU3ViamVjdCwgcmVkdWNlck1hbmFnZXI6IFJlZHVjZXJNYW5hZ2VyLCBpbml0aWFsU3RhdGU6IFQsIG1vY2tTZWxlY3RvcnM/OiBNb2NrU2VsZWN0b3JbXSk7XG4gICAgc2V0U3RhdGUobmV4dFN0YXRlOiBUKTogdm9pZDtcbiAgICBvdmVycmlkZVNlbGVjdG9yPFNlbGVjdG9yIGV4dGVuZHMgTWVtb2l6ZWQ8UmVzdWx0PiwgVmFsdWUgZXh0ZW5kcyBSZXN1bHQsIFJlc3VsdCA9IFNlbGVjdG9yIGV4dGVuZHMgTWVtb2l6ZWRTZWxlY3RvcjxhbnksIGluZmVyIFQ+ID8gVCA6IFNlbGVjdG9yIGV4dGVuZHMgTWVtb2l6ZWRTZWxlY3RvcldpdGhQcm9wczxhbnksIGFueSwgaW5mZXIgVT4gPyBVIDogVmFsdWU+KHNlbGVjdG9yOiBTZWxlY3RvciB8IHN0cmluZywgdmFsdWU6IFZhbHVlKTogT25seU1lbW9pemVkPHR5cGVvZiBzZWxlY3RvciwgUmVzdWx0PjtcbiAgICByZXNldFNlbGVjdG9ycygpOiB2b2lkO1xuICAgIHNlbGVjdChzZWxlY3RvcjogYW55LCBwcm9wPzogYW55KTogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIGFkZFJlZHVjZXIoKTogdm9pZDtcbiAgICByZW1vdmVSZWR1Y2VyKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmVmcmVzaGVzIHRoZSBleGlzdGluZyBzdGF0ZS5cbiAgICAgKi9cbiAgICByZWZyZXNoU3RhdGUoKTogdm9pZDtcbn1cbmV4cG9ydCB7fTtcbiJdfQ==